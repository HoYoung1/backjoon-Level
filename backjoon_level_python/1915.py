import sys


def print_matrix(matrix):
    for mat in matrix:
        print(mat)
    print()




# Top-bottom 재귀
# 기준 : 사각형의 오른쪽 위
# 시간상어차피 안되는데 심지어 틀림
def solve(matrix, n, m):
    maximum_square_size = 0
    dp = [[0]*m for _ in range(n)]

    def find_dp(i, j):
        if matrix[i][j] == '0':
            return 0
        if dp[i][j] != 0:
            return dp[i][j]

        before_i = i + 1
        before_j = j - 1
        if before_i < 0 or n <= before_i or before_j < 0 or m <= before_j:
            dp[i][j] = int(matrix[i][j])
            return dp[i][j]
        before_square = find_dp(before_i, before_j)
        for x in range(1, before_square + 1):
            if matrix[i+x][j] == '0':
                return 0
            if matrix[i][j-x] == '0':
                return 0
        dp[i][j] = before_square + 1
        return dp[i][j]

    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            size = find_dp(i, j)
            maximum_square_size = max(maximum_square_size, size)

    return maximum_square_size**2


# bottom-top
# 기준 : 사각형의 오른쪽 위
# 왜틀렸는지 죽었다 깨어나도 모르겠다
def solve2(matrix, n, m):
    maximum_square_size = 0
    dp = [[0] * m for _ in range(n)]

    for i in reversed(range(n)):
        for j in range(m):
            if matrix[i][j] == '0':
                continue

            before_i = i + 1
            before_j = j - 1
            if not (0 <= before_i < n and 0 <= before_j < m):
                dp[i][j] = 1
                maximum_square_size = max(maximum_square_size, dp[i][j])
                continue

            if dp[before_i][before_j] == 0:
                dp[i][j] = 1
            else:
                # 둘중하나가될꺼임
                # dp[i][j] = dp[before_i][before_j] + 1
                # dp[i][j] = 1
                # 그리고 마지막에는 maximum 을 ㄱ ㄱ
                success = True
                for x in range(1, dp[before_i][before_j] + 1):
                    if dp[i + x][j] >= dp[before_i][before_j] + 1 - x:
                        break
                    if dp[i + x][j] == 0:
                        success = False
                        break
                for x in range(1, dp[before_i][before_j]+1):
                    if dp[i][j - x] >= dp[before_i][before_j]+1 - x:
                        break
                    if dp[i][j - x] == 0:
                        success = False
                        break

                if success:
                    dp[i][j] = dp[before_i][before_j] + 1
                else:
                    dp[i][j] = 1

            maximum_square_size = max(maximum_square_size, dp[i][j])
    return maximum_square_size ** 2


# 기준 : 사각형의 오른쪽 아래
def solve3(matrix, n, m):
    maximum_square_size = 0
    dp = [[0] * (m+1) for _ in range(n+1)]
    for i in range(1, n+1):
        for j in range(1, m+1):
            if matrix[i-1][j-1] == '1':
                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
            maximum_square_size = max(maximum_square_size, dp[i][j])
    return maximum_square_size ** 2


# bottom-top
# 기준 : 사각형의 오른쪽 아래
# 왜틀렸는지 죽었다 깨어나도 모르겠다
def solve4(matrix, n, m):
    maximum_square_size = 0
    dp = [[0] * m for _ in range(n)]

    for i in range(n):
        for j in range(m):
            if matrix[i][j] == '0':
                continue

            before_i = i - 1
            before_j = j - 1
            if not (0 <= before_i < n and 0 <= before_j < m):
                dp[i][j] = 1
            else:
                if dp[before_i][before_j] == 0:
                    dp[i][j] = 1
                else:
                    # 둘중하나가될꺼임
                    # dp[i][j] = dp[before_i][before_j] + 1
                    # dp[i][j] = 1
                    # 그리고 마지막에는 maximum 을 ㄱ ㄱ
                    success = True
                    for x in range(1, dp[before_i][before_j] + 1):
                        if dp[i - x][j] >= dp[before_i][before_j] + 1 - x:
                            break
                        if dp[i - x][j] == 0:
                            success = False
                            break
                    for x in range(1, dp[before_i][before_j]+1):
                        if dp[i][j - x] >= dp[before_i][before_j]+1 - x:
                            break
                        if dp[i][j - x] == 0:
                            success = False
                            break

                    if success:
                        dp[i][j] = dp[before_i][before_j] + 1
                    else:
                        dp[i][j] = 1

            maximum_square_size = max(maximum_square_size, dp[i][j])
    return maximum_square_size ** 2

if __name__ == '__main__':
    n, m = map(int, input().split())
    matrix = [input() for _ in range(n)]
    print(solve3(matrix, n, m))

#     assert solve3(["0100", "0111", "1110", "0010"], 4, 4) == 4
#     assert solve3(["1110", "1111", "1110", "0010"], 4, 4) == 9
#     assert solve3(["1010", "0111", "1010", "0010"], 4, 4) == 1
#     assert solve3(["1010010", "0111111", "1010111", "0010111", "0010111", "0010111", "0010111"], 7, 7) == 9
#     assert solve3(["1010010", "0111111", "1011111", "0011111", "0111111", "0010010", "0010010"], 7, 7) == 16
#     assert solve3(["1"], 1, 1) == 1
#     assert solve3(["0"], 1, 1) == 0
#     assert solve3(["111", "101", "111"], 3, 3) == 1
#     assert solve3(["111", "111", "111"], 3, 3) == 9
#     assert solve3(["000", "000", "000"], 3, 3) == 0
#     assert solve3(["1100", "1111", "0111", "0111"], 4, 4) == 9
#     assert solve3(["00011", "00011", "11111", "11111", "11111"], 5, 5) == 9
#     assert solve3(["1100", "1111", "0111", "0111"], 4, 4) == 9
#     assert solve3(["111110", "111110", "111111", "111111", "111111", "001111"], 6, 6) == 25
#     assert solve3(["111110", "111110", "111111", "111111", "111111", "001111"], 6, 6) == 25
#     assert solve3(["1100", "1111", "0111", "0111"], 4, 4) == 9
#     assert solve3(["11111", "11111", "11111", "11111", "11111"], 5, 5) == 25
#     assert solve3(["11111", "11111", "11011", "11111", "11111"], 5, 5) == 4
#     assert solve3(["110011001100", "110011001100"], 2, 12) == 4
#     assert solve3(["11100", "11110", "11111", "01111", "00111"], 5, 5) == 9
#
#     mat = """11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111"""
#     assert solve3(mat.split('\n'), 80, 80) == 6400
#
#     s = 1000
#     assert solve3(["1" * s for _ in range(s)], s, s) == 1000 ** 2
#
#     s = 500
#     assert solve3(["0" * s for _ in range(s)], s, s) == 0
#
#     s = 500
#     assert solve3(["1" * s for _ in range(s)], s, s) == s ** 2
#     assert solve3(["01", "00"], 2, 2) == 1


# print_matrix(["1010010", "0111111", "1011111", "0011111", "0111111", "0010010", "0010010"]) == 16